// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id             String    @id @default(uuid())
  email          String    @unique
  password       String?
  name           String
  bio            String?
  birthDate      DateTime?
  gender         String?
  interestedIn   String[]
  location       Json?     // Stores latitude and longitude
  profilePicture String?
  photos         String[]
  verified       Boolean   @default(false)
  verifyToken    String?
  resetToken     String?
  resetExpires   DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Authentication providers
  googleId       String?   @unique
  facebookId     String?   @unique
  telegramId     String?   @unique

  // Relationships
  sentLikes      Like[]    @relation("SentLikes")
  receivedLikes  Like[]    @relation("ReceivedLikes")
  sentMatches    Match[]   @relation("UserOne")
  receivedMatches Match[]  @relation("UserTwo")
  sentMessages   Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  subscription   Subscription?
  payments       Payment[]
  notifications  Notification[]
}

// Like model
model Like {
  id        String   @id @default(uuid())
  fromUser  User     @relation("SentLikes", fields: [fromUserId], references: [id])
  fromUserId String
  toUser    User     @relation("ReceivedLikes", fields: [toUserId], references: [id])
  toUserId  String
  createdAt DateTime @default(now())

  @@unique([fromUserId, toUserId])
}

// Match model
model Match {
  id        String   @id @default(uuid())
  userOne   User     @relation("UserOne", fields: [userOneId], references: [id])
  userOneId String
  userTwo   User     @relation("UserTwo", fields: [userTwoId], references: [id])
  userTwoId String
  messages  Message[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userOneId, userTwoId])
}

// Message model
model Message {
  id        String   @id @default(uuid())
  content   String
  match     Match    @relation(fields: [matchId], references: [id])
  matchId   String
  sender    User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId  String
  receiver  User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

// Subscription model
model Subscription {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @unique
  plan       String   // "basic", "premium", "platinum"
  startDate  DateTime @default(now())
  endDate    DateTime
  autoRenew  Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  payments   Payment[]
}

// Payment model
model Payment {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?
  amount         Float
  currency       String   // "USD", "BTC", "ETH", "SOL", "TON"
  status         String   // "pending", "completed", "failed"
  paymentMethod  String   // "bitcoin", "ethereum", "solana", "ton", "telegram_stars"
  transactionId  String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// Notification model
model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String   // "match", "message", "payment", "system"
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}
